@using Microsoft.EntityFrameworkCore
@using PrepodRate.Controllers
@using PrepodRate.Data
@using System.Timers
@inject ApplicationDbContext db

@rendermode InteractiveServer

@if(_isAdding)
{
    <div class="input-group" style="padding-bottom: 1rem">
        <input type="text" class="form-control" placeholder="–ò–º—è" @bind-value="@_firstName" @bind-value:event="oninput"/>
        <input type="text" class="form-control" placeholder="–§–∞–º–∏–ª–∏—è" @bind-value="@_lastName" @bind-value:event="oninput"/>
        <input type="text" class="form-control" placeholder="–û—Ç—á–µ—Å—Ç–≤–æ" @bind-value="@_patronymic" @bind-value:event="oninput"/>
    </div>
    <div class="input-group" style="padding-bottom: 1rem">
        <input type="text" class="form-control" placeholder="–í–£–ó" @bind-value="@_uni" @bind-value:event="oninput"/>
    </div>
    <div>
        <p style="margin-bottom: 0">–û—Ü–µ–Ω–∫–∞:</p>
        <div style="display: flex; overflow: hidden; margin-bottom: 1em; gap: 0.2em">
            <span style="cursor: pointer" @onclick="() => { _rate = 1; }">@(_rate >= 1 ? "‚≠ê" : whatSmile())</span>
            <span style="cursor: pointer" @onclick="() => { _rate = 2; }">@(_rate >= 2 ? "‚≠ê" : whatSmile())</span>
            <span style="cursor: pointer" @onclick="() => { _rate = 3; }">@(_rate >= 3 ? "‚≠ê" : whatSmile())</span>
            <span style="cursor: pointer" @onclick="() => { _rate = 4; }">@(_rate >= 4 ? "‚≠ê" : whatSmile())</span>
            <span style="cursor: pointer" @onclick="() => { _rate = 5; }">@(_rate == 5 ? "‚≠ê": whatSmile())</span>
            <span>@_rate/5</span>
        </div>
        @code {

            private int _rate = 1;

            private string whatSmile()
            {
                switch (_rate)
                {
                    case 1:
                        return "üòµ";
                    case 2:
                        return "ü´§";
                    case 3:
                        return "üòê";
                    case 4:
                        return "üòè";
                    default:
                        return "";

                }
            }

        }
    </div>
    <div class="input-group" style="padding-bottom: 1rem;">
        <input class="form-control" placeholder="–û—Ç–∑—ã–≤ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ" @bind-value="@_review" @bind-value:event="oninput"/>
    </div>
    <div class="btn-group" role="group" style="margin-bottom: 1rem">
        <button class="btn btn-primary @(isFilled() ? "" : "disabled")" @onclick="AddReview">–î–æ–±–∞–≤–∏—Ç—å</button>
        <button class="btn btn-danger" @onclick="Switch">–û—Ç–º–µ–Ω–∏—Ç—å</button>
        <button class="btn btn-secondary" @onclick="ResetData">–°–±—Ä–æ—Å–∏—Ç—å</button>
    </div>
}
else 
{
    <button class="btn btn-primary" @onclick="Switch" style="margin-bottom: 1rem">–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞</button>
}

<ListOfProfessors @ref="child"/>

@code {
    private bool _isAdding = false;
    
    private ListOfProfessors child;

    private string _firstName = "";
    private string _lastName = "";
    private string _patronymic = "";
    private string _uni = "";
    private string _review = "";

    private void ResetData()
    {
        _patronymic = "";
        _firstName = "";
        _lastName = "";
        _review = "";
        _uni = "";
    }


    private bool isFilled()
    {
        if (_firstName != "" && _lastName != "" && _patronymic != ""
            && _uni != "" && _review != "")
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    private void Switch()
    {
        _isAdding ^= true;
    }

    private async Task AddReview()
    {
        var professors = await db.Professors.ToListAsync();
        int foundProfId = -1;
        foreach (var prof in professors)
        {
            if (prof.Name == _firstName && prof.Surname == _lastName && prof.Patronymic == _patronymic && prof.University == _uni)
            {
                foundProfId = prof.Id;
                break;
            }
        }

        if (foundProfId == -1)
        {
            Professor prof = new Professor();
            prof.Name = _firstName;
            prof.Surname = _lastName;
            prof.Patronymic = _patronymic;
            prof.University = _uni;
            ResetData();
            var result = await db.Professors.AddAsync(prof);
            await db.SaveChangesAsync();

            foundProfId = result.Entity.Id;
        }
        
        Review rev = new Review();
        rev.ProfessorId = foundProfId;
        rev.Rating = _rate;
        rev.Body = _review;
        await db.Reviews.AddAsync(rev);
        await db.SaveChangesAsync();
        await child.RefreshData();
        Switch();
    }
}